{
  "PestExpect": {
    "scope": "php",
    "prefix": ":pex",
    "body": [
      "expect()"],
    "description": "Pest expect()"
  },
  "PestExpectToBe": {
    "scope": "php",
    "prefix": ":pextobe",
    "body": [
      "->toBe(${1:});\n"],
    "description": "Pest ->toBe()"
  },
  "PestExpectToBeEmpty": {
    "scope": "php",
    "prefix": ":pextobeempty",
    "body": [
      "->toBeEmpty();\n"],
    "description": "Pest ->toBeEmpty()"
  },
  "PestExpectToBeTrue": {
    "scope": "php",
    "prefix": ":pextobetrue",
    "body": [
      "->toBeTrue();\n"],
    "description": "Pest ->toBeTrue()"
  },
  "PestExpectToBeTruthy": {
    "scope": "php",
    "prefix": ":pextobetruthy",
    "body": [
      "->toBeTruthy();\n"],
    "description": "Pest ->toBeTruthy()"
  },
  "PestExpectToBeFalse": {
    "scope": "php",
    "prefix": ":pextobefalse",
    "body": [
      "->toBeFalse();\n"],
    "description": "Pest ->toBeFalse()"
  },
  "PestExpectToBeFalsy": {
    "scope": "php",
    "prefix": ":pextobefalsy",
    "body": [
      "->toBeFalsy();\n"],
    "description": "Pest ->toBeFalsy()"
  },
  "PestExpectToBeGreaterThan": {
    "scope": "php",
    "prefix": ":pextobegreaterthan",
    "body": [
      "->toBeGreaterThan(${1:});\n"],
    "description": "Pest ->toBeGreaterThan()"
  },
  "PestExpectToBeGreaterThanOrEqual": {
    "scope": "php",
    "prefix": ":pextobegreaterthanorequal",
    "body": [
      "->toBeGreaterThanOrEqual(${1:});\n"],
    "description": "Pest ->toBeGreaterThanOrEqual()"
  },
  "PestExpectToBeLessThan": {
    "scope": "php",
    "prefix": ":pextobelessthan",
    "body": [
      "->toBeLessThan(${1:});\n"],
    "description": "Pest ->toBeLessThan()"
  },
  "PestExpectToBeLessThanOrEqual": {
    "scope": "php",
    "prefix": ":pextobelessthanorequal",
    "body": [
      "->toBeLessThanOrEqual(${1:});\n"],
    "description": "Pest ->toBeLessThanOrEqual()"
  },
  "PestExpectToContain": {
    "scope": "php",
    "prefix": ":pextocontain",
    "body": [
      "->toContain(${1:});\n"],
    "description": "Pest ->toContain()"
  },
  "PestExpectToHaveCount": {
    "scope": "php",
    "prefix": ":pextohavecount",
    "body": [
      "->toHaveCount(${1:});\n"],
    "description": "Pest ->toHaveCount()"
  },
  "PestExpectToHaveProperty": {
    "scope": "php",
    "prefix": ":pextohaveproperty",
    "body": [
      "->toHaveProperty(${1:});\n"],
    "description": "Pest ->toHaveProperty()"
  },
  "PestExpectToHaveProperties": {
    "scope": "php",
    "prefix": ":pextohaveproperties",
    "body": [
      "->toHaveProperties(${1:});\n"],
    "description": "Pest ->toHaveProperties()"
  },
  "PestExpectToMatchArray": {
    "scope": "php",
    "prefix": ":pextomatcharray",
    "body": [
      "->toMatchArray(${1:});\n"],
    "description": "Pest ->toMatchArray()"
  },
  "PestExpectToMatchObject": {
    "scope": "php",
    "prefix": ":pextomatchobject",
    "body": [
      "->toMatchObject(${1:});\n"],
    "description": "Pest ->toMatchObject()"
  },
  "PestExpectToEqual": {
    "scope": "php",
    "prefix": ":pextoequal",
    "body": [
      "->toEqual(${1:});\n"],
    "description": "Pest ->toEqual()"
  },
  "PestExpectToEqualCanonicalizing": {
    "scope": "php",
    "prefix": ":pextoequalcanonicalizing",
    "body": [
      "->toEqualCanonicalizing(${1:});\n"],
    "description": "Pest ->toEqualCanonicalizing()"
  },
  "PestExpectToEqualWithDelta": {
    "scope": "php",
    "prefix": ":pextoequalwithdelta",
    "body": [
      "->toEqualWithDelta(${1:});\n"],
    "description": "Pest ->toEqualWithDelta()"
  },
  "PestExpectToBeIn": {
    "scope": "php",
    "prefix": ":pextobein",
    "body": [
      "->toBeIn();\n"],
    "description": "Pest ->toBeIn()"
  },
  "PestExpectToBeInfinite": {
    "scope": "php",
    "prefix": ":pextobeinfinite",
    "body": [
      "->toBeInfinite();\n"],
    "description": "Pest ->toBeInfinite()"
  },
  "PestExpectToBeInstanceOf": {
    "scope": "php",
    "prefix": ":pextobeinstanceof",
    "body": [
      "->toBeInstanceOf(${1:});\n"],
    "description": "Pest ->toBeInstanceOf()"
  },
  "PestExpectToBeBool": {
    "scope": "php",
    "prefix": ":pextobebool",
    "body": [
      "->toBeBool();\n"],
    "description": "Pest ->toBeBool()"
  },
  "PestExpectToBeCallable": {
    "scope": "php",
    "prefix": ":pextobecallable",
    "body": [
      "->toBeCallable();\n"],
    "description": "Pest ->toBeCallable()"
  },
  "PestExpectToBeFloat": {
    "scope": "php",
    "prefix": ":pextobefloat",
    "body": [
      "->toBeFloat();\n"],
    "description": "Pest ->toBeFloat()"
  },
  "PestExpectToBeInt": {
    "scope": "php",
    "prefix": ":pextobeint",
    "body": [
      "->toBeInt();\n"],
    "description": "Pest ->toBeInt()"
  },
  "PestExpectToBeIterable": {
    "scope": "php",
    "prefix": ":pextobeiterable",
    "body": [
      "->toBeIterable();\n"],
    "description": "Pest ->toBeIterable()"
  },
  "PestExpectToBeNumeric": {
    "scope": "php",
    "prefix": ":pextobenumeric",
    "body": [
      "->toBeNumeric();\n"],
    "description": "Pest ->toBeNumeric()"
  },
  "PestExpectToBeObject": {
    "scope": "php",
    "prefix": ":pextobeobject",
    "body": [
      "->toBeObject();\n"],
    "description": "Pest ->toBeObject()"
  },
  "PestExpectToBeResource": {
    "scope": "php",
    "prefix": ":pextoberesource",
    "body": [
      "->toBeResource();\n"],
    "description": "Pest ->toBeResource()"
  },
  "PestExpectToBeScalar": {
    "scope": "php",
    "prefix": ":pextobescalar",
    "body": [
      "->toBeScalar();\n"],
    "description": "Pest ->toBeScalar()"
  },
  "PestExpectToBeString": {
    "scope": "php",
    "prefix": ":pextobestring",
    "body": [
      "->toBeString();\n"],
    "description": "Pest ->toBeString()"
  },
  "PestExpectToBeJson": {
    "scope": "php",
    "prefix": ":pextobejson",
    "body": [
      "->toBeJson();\n"],
    "description": "Pest ->toBeJson()"
  },
  "PestExpectToBeNan": {
    "scope": "php",
    "prefix": ":pextobenan",
    "body": [
      "->toBeNan();\n"],
    "description": "Pest ->toBeNan()"
  },
  "PestExpectToBeNull": {
    "scope": "php",
    "prefix": ":pextobenull",
    "body": [
      "->toBeNull();\n"],
    "description": "Pest ->toBeNull()"
  },
  "PestExpectToHaveKey": {
    "scope": "php",
    "prefix": ":pextohavekey",
    "body": [
      "->toHaveKey(${1:});\n"],
    "description": "Pest ->toHaveKey()"
  },
  "PestExpectToHaveKeys": {
    "scope": "php",
    "prefix": ":pextohavekeys",
    "body": [
      "->toHaveKeys(${1:});\n"],
    "description": "Pest ->toHaveKeys()"
  },
  "PestExpectToHaveLength": {
    "scope": "php",
    "prefix": ":pextohavelength",
    "body": [
      "->toHaveLength();\n"],
    "description": "Pest ->toHaveLength()"
  },
  "PestExpectToBeDirectory": {
    "scope": "php",
    "prefix": ":pextobedirectory",
    "body": [
      "->toBeDirectory();\n"],
    "description": "Pest ->toBeDirectory"
  },
  "PestExpectToBeReadableDirectory": {
    "scope": "php",
    "prefix": ":pextobereadabledirectory",
    "body": [
      "->toBeReadableDirectory();\n"],
    "description": "Pest ->toBeReadableDirectory"
  },
  "PestExpectToBeWritableDirectory": {
    "scope": "php",
    "prefix": ":pextobewritabledirectory",
    "body": [
      "->toBeWritableDirectory();\n"],
    "description": "Pest ->toBeWritableDirectory()"
  },
  "PestExpectToStartWith": {
    "scope": "php",
    "prefix": ":pextostartwith",
    "body": [
      "->toStartWith(${1:});\n"],
    "description": "Pest ->toStartWith()"
  },
  "PestExpectToEndWith": {
    "scope": "php",
    "prefix": ":pextoendwith",
    "body": [
      "->toEndWith(${1:});\n"],
    "description": "Pest ->toEndWith()"
  },
  "PestExpectToMatch": {
    "scope": "php",
    "prefix": ":pextomatch",
    "body": [
      "->toMatch(${1:});\n"],
    "description": "Pest ->toMatch()"
  },
  "PestExpectToThrow": {
    "scope": "php",
    "prefix": ":pextothrow",
    "body": [
      "->toThrow(${1:});\n"],
    "description": "Pest ->toThrow()"
  },
  "PestExpectToMatchConstraint": {
    "scope": "php",
    "prefix": ":pextomatchconstraint",
    "body": [
      "->toMatchConstraint(${1:});\n"],
    "description": "Pest ->toMatchConstraint()"
  },
  "PestExpectJson": {
    "scope": "php",
    "prefix": ":pexjson",
    "body": [
      "->json()->\n"],
    "description": "Pest ->json()->"
  },
  "PestExpectMatch": {
    "scope": "php",
    "prefix": ":pexmatch",
    "body": [
      "->match()->\n"],
    "description": "Pest ->match()->"
  },
  "PestExpectDd": {
    "scope": "php",
    "prefix": ":pexdd",
    "body": [
      "->dd();\n"],
    "description": "Pest ->dd()"
  },
  "PestExpectRay": {
    "scope": "php",
    "prefix": ":pexray",
    "body": [
      "->ray();\n"],
    "description": "Pest ->ray()"
  },
  "PestExpectAnd": {
    "scope": "php",
    "prefix": ":pexand",
    "body": [
      "->and(${1:})->\n"],
    "description": "Pest ->and()->"
  },
  "PestExpectNot": {
    "scope": "php",
    "prefix": ":pexnot",
    "body": [
      "->not->\n"],
    "description": "Pest ->not->"
  },
  "PestExpectTap": {
    "scope": "php",
    "prefix": ":pextap",
    "body": [
      "->tap(${1:})->\n"],
    "description": "Pest ->tap()->"
  },
  "PestExpectEach": {
    "scope": "php",
    "prefix": ":pexeach",
    "body": [
      "->each(${1:})->\n"],
    "description": "Pest ->each()->"
  },
  "PestExpectSequence": {
    "scope": "php",
    "prefix": ":pexsequence",
    "body": [
      "->sequence(${1:});\n"],
    "description": "Pest ->sequence()"
  },
  "PestExpectWhen": {
    "scope": "php",
    "prefix": ":pexwhen",
    "body": [
      "->when(${1:});\n"],
    "description": "Pest ->when()"
  },
  "PestExpectUnless": {
    "scope": "php",
    "prefix": ":pexunless",
    "body": [
      "->unless(${1:});\n"],
    "description": "Pest ->unless()"
  }
}